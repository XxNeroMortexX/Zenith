|**
#__________________________________________________________________________________________
#
#                (ｯ`ｷ.ｷ[Thanks for Using NeroMorte's Macro Zenith]ｷ.ｷｴｯ)
#
#
#                                      |ｯｯｯ\__
#                                      (ｰ_ｰ)
#                          末末末末------o00--------------------------
#   ).__________          |             Downloaded From               |
#  / ////_______| - - -   |                                           |
#  )  /(_)                 末末末末---------o00-----------------------
# /__/                                /_/  \_\
#                                    :__:  :__:
#
#        ｫｷ聞 (`ｻｷｷ､[      Guild: Blades of Discord       ]ﾗｷｷｫｷｴ) ｷ聞ｻ
#        ｫｷ聞 (`ｻｷｷ､[       Created By: NeroMorte         ]ﾗｷｷｫｷｴ) ｷ聞ｻ
#        ｫｷ聞 (`ｻｷｷ､[      Discord: NeroMorte#8786        ]ﾗｷｷｫｷｴ) ｷ聞ｻ
#
#__________________________________________________________________________________________
#
#
#
#----------------------# Created for SERVER: [PEQ] The Grand Creation - Omens of War #-------------------------------
**|

#define ${INI_LOCATION_PREFIX} Morte/BOT_INIS
#define ${MACRO_INI_LOCATION_PREFIX} Morte/Zenith_INIS
#define ${ERRORLOG_LOCATION_PREFIX} Morte/Zenith_Logs
#define ${INI_FILE_PREFIX} bot
#define ${BOT_FILE_PREFIX} ${Me.CleanName}
#define ${NINJALOOT_FILE_PREFIX} NinjaLoot
#define ${FORAGE_FILE_PREFIX} Forage
#define ${PICKPOCKET_FILE_PREFIX} PickPocket
#define ${SMOOTHMOVES_FILE_PREFIX} SmoothMoves
#define ${SPAWNTRACKER_FILE_PREFIX} SpawnTracker
#define ${MACRO_FILE_PREFIX} Zenith
#define ${FILENAME_PREFIX} .ini
#define ${DebugError} (@{Subrountine.Arg[1,(]}):(@{SubCurrentLine})
#define ${DebugErrorFull} Macro[@{MacroName}]:Memory[@{MemoryUsage}mb]:RunTime[@{RunTime}]:(@{Subrountine.Arg[1,(]}):(@{SubCurrentLine})

#warning
#turbo 240

|**
-------------------------------------------------------------------------
Macro Include Files
-------------------------------------------------------------------------
**|

#include Morte/Zenith_Includes/Zenith_Setup.inc
#include Morte/Zenith_Includes/Zenith_Core.inc
#include Morte/Zenith_Includes/Zenith_Commands.inc
#include Morte/Zenith_Includes/Zenith_Combat.inc
#include Morte/Zenith_Includes/Zenith_Basic.inc
#include Morte/Zenith_Includes/Zenith_Events.inc

|:#include Morte/Zenith_main.inc
|:#include Morte/Zenith_settings_messages.inc
|:#include Morte/Zenith_events.inc
|:#include Morte/Zenith_combat.inc
|:#include Morte/Zenith_healer.inc
|:#include Morte/Zenith_spell.inc
|:#include Morte/Zenith_pets.inc
|:#include Morte/Zenith_change_parameters.inc
|:#include Morte/Zenith_spell_routines.inc
|:#include Morte/Zenith_update_progression.inc
|:#include Morte/Zenith_ini_updater.inc
|:#include Morte/Zenith_wait4rez.inc
|:#include Morte/Zenith_BoxingSetup.inc
|:
|:|:Created by: Killians
|:#include Morte/Zenith_smooth_moves.inc
|:#include Morte/Zenith_ninjaloot.inc
|:#include Morte/Zenith_corpsesummoning.inc
|:
|:|:Spawn Track by Database.
|:#include Morte/Zenith_spawn_tracker.inc

Sub main(string Options)
	
	/delay 1
	/if (!${Defined[Entry_Time]}) /declare Entry_Time string local ${Time.Time12.Replace[:, ]}

	/declare Masters_INI string outer ${INI_LOCATION_PREFIX}/${INI_FILE_PREFIX}_Masters${FILENAME_PREFIX}
	/declare BOT_INI string outer ${INI_LOCATION_PREFIX}/${INI_FILE_PREFIX}_${BOT_FILE_PREFIX}_${Me.Class.Name.Replace[ ,_]}${FILENAME_PREFIX}
	/declare NINJALOOT_INI string outer ${INI_LOCATION_PREFIX}/${INI_FILE_PREFIX}_${BOT_FILE_PREFIX}_${Me.Class.Name.Replace[ ,_]}_${NINJALOOT_FILE_PREFIX}${FILENAME_PREFIX}
	/declare FORAGE_INI string outer ${INI_LOCATION_PREFIX}/${INI_FILE_PREFIX}_${BOT_FILE_PREFIX}_${Me.Class.Name.Replace[ ,_]}_${FORAGE_FILE_PREFIX}${FILENAME_PREFIX}
	/declare PICKPOCKET_INI string outer ${INI_LOCATION_PREFIX}/${INI_FILE_PREFIX}_${BOT_FILE_PREFIX}_${Me.Class.Name.Replace[ ,_]}_${PICKPOCKET_FILE_PREFIX}${FILENAME_PREFIX}
	/declare SMOOTHMOVES_INI string outer ${INI_LOCATION_PREFIX}/${INI_FILE_PREFIX}_${BOT_FILE_PREFIX}_${Me.Class.Name.Replace[ ,_]}_${SMOOTHMOVES_FILE_PREFIX}${FILENAME_PREFIX}
	/declare SPAWNTRACKER_INI string outer ${INI_LOCATION_PREFIX}/${INI_FILE_PREFIX}_${BOT_FILE_PREFIX}_${Me.Class.Name.Replace[ ,_]}_${SPAWNTRACKER_FILE_PREFIX}${FILENAME_PREFIX}
	
	
		
	|:----------------------------------------------------------------------
	|: Force genbot to check if plugin's are loaded.
	|:----------------------------------------------------------------------
	/echo Loading Required Plugins for Genbot... Please wait..
	/if (!${Plugin[MQ2MoveUtils].Name.Length}) /echo Loading MQ2MoveUtils Plugin...
	/if (!${Plugin[MQ2MoveUtils].Name.Length}) /plugin MQ2MoveUtils load
	/if (${Plugin[MQ2MoveUtils].Name.Length}) {
		/squelch /nomodkey /docommand /moveto set SaveByChar off
		/squelch /nomodkey /docommand /moveto set AlwaysCCW off
		/squelch /nomodkey /docommand /moveto set TryToJump on
		/squelch /nomodkey /docommand /moveto set StuckLogic on
		/squelch /nomodkey /docommand /moveto set TurnHalf on
		/squelch /nomodkey /docommand /moveto set DistStuck 1
		/squelch /nomodkey /docommand /moveto set PulseCheck 6
		/squelch /nomodkey /docommand /moveto set PulseUnstuck 6
		/squelch /nomodkey /docommand /moveto set Save
	}
	/if (!${Plugin[MQ2Exchange].Name.Length}) /echo Loading MQ2Exchange Plugin...
	/if (!${Plugin[MQ2Exchange].Name.Length}) /plugin MQ2Exchange load

	/if (!${Plugin[MQ2Cast].Name.Length}) /echo Loading MQ2Cast Plugin...
	/if (!${Plugin[MQ2Cast].Name.Length}) /plugin MQ2Cast load

	/if (!${Plugin[MQ2Turbo].Name.Length}) /echo Loading MQ2Turbo Plugin...
	/if (!${Plugin[MQ2Turbo].Name.Length}) /plugin MQ2Turbo load


	/if (!${Plugin[MQ2Twist].Name.Length}) /echo Loading MQ2Twist Plugin...
	/if (!${Plugin[MQ2Twist].Name.Length}) /plugin MQ2Twist load

	/if (${Me.Class.Name.Equal[Bard]}) {
		/if (!${Plugin[MQ2BardSwap].Name.Length}) /echo Loading MQ2BardSwap Plugin...
		/if (!${Plugin[MQ2BardSwap].Name.Length}) /plugin MQ2BardSwap load
		/if (${Plugin[MQ2BardSwap].Name.Length} && !${BardSwap}) /echo Turning On BardSwap Ability...	
		/if (${Plugin[MQ2BardSwap].Name.Length} && !${BardSwap}) /bardswap
		
		/stick set autopause off
	}

	|:/if (${EQBCStatus.Equal["on"]}) /call JoinEQBC	

	
	|:----------------------------------------------------------------------
	|:Call the Initialize Sub of each include file
	|:----------------------------------------------------------------------
	/if (!${Defined[GenFor]}) /declare GenFor int local
	/declare SectionName string outer

	|: INI Sections
	/declare SectionsList string outer Core Shortcuts Combat
	|:Core Settings Wait4Rez BoxingSetup Combat AutoCombat Spell CHRotation Cures Debuffs ClassSpec Pets Healer cParams SpawnTracker NinjaLoot Shortcuts SmoothMoves
	/for GenFor 1 to ${Math.Calc[${SectionsList.Count[ ]}+1]}
		|:${Ini[${IniFile},Core,DebugList]}
		|:/if (${Select[${DebugList.Upper},MAIN]}) /echo Initialize Section [Init_${SectionsList.Arg[${GenFor}]}_Ini].
		
		/declare cmds-${SectionsList.Arg[${GenFor}]} string outer

		
		|:Load Settings based on each Section.
		/varset SectionName ${SectionsList.Arg[${GenFor}]}
		/call Init_${SectionsList.Arg[${GenFor}]}_Ini
		
	/next GenFor
	
	|:----------------------------------------------------------------------
	|: Setting SectionName to EQBCSettings, Applying Defualt Values.
	|:----------------------------------------------------------------------
	/varset SectionName EQBCSettings
	/call LoadSetting "${Macro.CurSub}" "${Macro.CurLine}" EQBCStatus string EQBCStatus(On/Off) "on"
	/call LoadSetting "${Macro.CurSub}" "${Macro.CurLine}" EQBCServer string EQBCServer "127.0.0.1"
	/call LoadSetting "${Macro.CurSub}" "${Macro.CurLine}" EQBCPort string EQBCPort "2112"
	/call LoadSetting "${Macro.CurSub}" "${Macro.CurLine}" DeleteMe DeleteMe EQBCGenbotMaster "|** NOT USED DELETE ME ]--[ NOT USED DELETE ME **|"
	
	|:Clear SectionName Variable.
	/varset SectionName
	
	


|:Delete THESE! \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
	|:----------------------------------------------------------------------
	|:ListFindStringArg(string sList,string sString,string sDiv)
	|:
	|:/call ListFindStringArg "one two three four" "four" " "
	|:/next GenFor
	|:/call ListDelbyName "one two three four" "one" " "


/declare Toggle-autouninvis string outer FALSE
/declare Toggle-petona string outer FALSE
/declare Toggle-autoaccept string outer FALSE
/declare Toggle-autochainnuke string outer FALSE
/declare Toggle-debuffs string outer FALSE
/declare Toggle-anchor string outer FALSE
/declare ChainNukePct-DefaultValue string outer FALSE
/declare ChainNuke-DefaultValue string outer FALSE
/declare ChainNuke string outer FALSE
/declare ChainNukePct string outer FALSE
/declare DebuffSpell#1 string outer FALSE
/declare DebuffSpell#1-DefaultValue string outer FALSE
/declare interruptFlag string outer FALSE
/declare TwitchStop string outer 0
/varset CombatTargetID 0
|:Delete THESE! /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\


|: Replace: IniFile With: BOT_INI


	|: Calculate Time taken to load Macro Setup.
	/if (!${Defined[Exit_Time]}) /declare Exit_Time string local ${Time.Time12.Replace[:, ]}
	/echo Load Time: [${Math.Calc[${Exit_Time}-${Entry_Time}].Int}s]
		
	|: IF Macro Loaded with Params and Param is Equal to [Reloaded].
	/if (${Macro.Params} > 0 && ${Options.Equal[Reloaded]}) {
		:Wait4Reload
		/delay 5
		/if (${Macro.RunTime} <= 2) /goto :Wait4Reload

		/call ChatOut 3 "Finished Reloading [${Macro.Name.Upper.Left[-4]}]." "0"
	}
	
	|: Main Macro Loop
	/varset Entry_Time ${Time.Time12.Replace[:, ]}
	:MainLoop
	
		/doevents
		
		/call Combatcheck
		/Call Debug_Spew "CombatTargetID [${CombatTargetID}] Status: [${If[${CombatTargetID} != 0,TRUE,FALSE]}]" "ALL,CORE,${Macro.CurSub.Arg[1,(]}" "${Macro.Params}" "${Macro.CurSub}" "${Macro.CurLine}" "${Macro.MemUse}" "${Macro.RunTime}" "${Macro.Name}"
	
		/if (${Bool[${CombatTargetID}]}) {
		
			/if (${Toggle-autochainnuke}) {
				/if (${ChainNukePct.NotEqual[${ChainNukePct-DefaultValue}]} && ${ChainNuke.NotEqual[${ChainNuke-DefaultValue}]}) {
					/if (${Spawn[${CombatTargetID}].PctHPs} < ${ChainNukePct}) /call AutoChainNuke
				}
			}
			
			/if (${Toggle-debuffs} && ${DebuffSpell#1.NotEqual[${DebuffSpell#1-DefaultValue}]}) /call AssistDebuffs
			
			/if (${Toggle-melee} || ${Toggle-archery} || ${Me.Combat} || ${Me.AutoFire}) /call CombatMain

		}
		
		|: Sets Pet to Hold Automatically.
		/if (${Bool[${Me.AltAbility[Pet Discipline].ID}]} && ${Bool[${Me.Pet.ID}]} && !${Me.Pet.Hold}) /squelch /nomodkey /docommand /Pet Hold
		
		/if (${Toggle-guard}) /call AutoGuard
		
		/if (${Toggle-protect}) /call AutoProtect

		/call DialogWindows		

		/call BotTracker
	
		|: Fix Desync Issue Automatically [YouPlayer], [LOGIN]
		/if (${Plugin[MQ2EQBC].Name.Length}) {	
			/if (${EQBC.Connected} && !${Bool[${Select[${Me.CleanName},${EQBC.Names.Replace[ ,,]}]}]} && ${Desync} == 0) {
				/call ChatOut 17 "Master [[+r+]${Me.CleanName}[+w+]] got [+r+]Desync from EQBC[+w+]. [+y+]Trying to Fix it now..." "0"
				/delay 2
				/bccmd force
				/varset Desync 10s
			} else /if (!${EQBC.Connected} && ${Desync} == 0) {		
				/bccmd quit
				/delay 5
				/bccmd connect ${EQBCServer} ${EQBCPort}
				/delay 15 ${EQBC.Connected}
				/varset Desync 10s
			}
		}
		
		/varset Exit_Time ${Time.Time12.Replace[:, ]}
		|:/echo Complete Loop RunTime: [${Math.Calc[${Exit_Time}-${Entry_Time}].Int}s]
	/goto :MainLoop

/return

Sub DialogWindows

	|: Display Dialog Box Message to [ChatIn] Channel, Automatically Accept IF [GUILDIE||autoaccept].
	/if (!${Bool[${DialogMsgTimer}]}) {

		|:Check IF Tradewindow is open, Send to chat if one is.
		/if (${Window[TradeWnd].Open}) {
			
			/varset DialogMsgTimer 90s
			/call ChatOut 1 "[Timer-${DialogMsgTimer}] I Detected a [+r+]Trade Window [+w+]open Should I [+r+][[+y+]accept[+r+]] [+w+]or [+r+][[+y+]reject[+r+]] [+r+][[+y+]${Window[TradeWnd].Child[TRDW_HisName].Text}'s[+r+]][+w+] Offer." "0"

		|:Check IF Dialog Box is open, Send to chat if one is.
		} else /if (${Window[ConfirmationDialogBox].Open}) {
			
			|:Raid Invite Window
			/if (${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[invites you to join a raid.  Would you like to join?]}) {
				/if (${Spawn[pc ${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Arg[1, ]}].Guild.Equal[${Me.Guild}]} || ${Toggle-autoaccept}) {
					/nomodkey /notify ConfirmationDialogBox Yes_Button leftmouseup
					/return
				}
			|:Resurrection Window
			} else /if (${Bool[${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[(100 percent) upon you. Do you wish this?]}]} || ${Bool[${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[(96 percent) upon you. Do you wish this?]}]} || ${Bool[${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Find[(90 percent) upon you. Do you wish this?]}]}) {
				/if (${Spawn[pc ${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text.Arg[1, ]}].Guild.Equal[${Me.Guild}]} || ${Toggle-autoaccept}) {
					/nomodkey /notify ConfirmationDialogBox Yes_Button leftmouseup
					/return
				}
			}
			
			/varset DialogMsgTimer 90s
			/call ChatOut 1 "[Timer-${DialogMsgTimer}] I Detected a [+r+]Dialog Window [+w+]open Should I [+r+][[+y+]accept[+r+]] [+w+]or [+r+][[+y+]reject[+r+]] [+r+][[+y+]${Window[ConfirmationDialogBox].Child[CD_TextOutput].Text}[+r+]][+w+] Offer." "0"

		|:Check if GuildHall Teleport Window Open	
		} else /if (${Window[LargeDialogWindow].Open} && ${Window[LargeDialogWindow].Child[LDW_TextBox].Text.Find[Teleport to]}) {

			/varset DialogMsgTimer 90s
			/call ChatOut 1 "[Timer-${DialogMsgTimer}] I Detected a [+r+]Large Dialog Window [+w+]open Should I [+r+][[+y+]accept[+r+]] [+w+]or [+r+][[+y+]reject[+r+]] [+r+][[+y+]${Window[LargeDialogWindow].Child[LDW_TextBox].Text}[+r+]][+w+] Offer." "0"
			
		}
		
	}
	
/return

Sub BotTracker

	|: Bot-Tracker
	/if (${Toggle-bottracker}) {
	
		/if (!${Defined[x]}) /declare x int local

		/if (${EQBC.Names.Length}) {
		
			/for x 1 to ${Math.Calc[${EQBC.Names.Count[ ]}+1].Int}
			
			/doevents
			
			/if (!${Defined[SpamTimer_${EQBC.Names.Arg[${x}, ]}]} && ${Bool[${EQBC.Names.Arg[${x}]}]}) /declare SpamTimer_${EQBC.Names.Arg[${x}, ]} timer outer 0
			
			/if (!${Bool[${EQBC.Names.Arg[${x}]}]}) /continue
			
			/if (${SpamTimer_${EQBC.Names.Arg[${x}, ]}} == 0) {
			
				/varset SpamTimer_${EQBC.Names.Arg[${x}, ]} 3s
			
				/if (${Spawn[pc ${EQBC.Names.Arg[${x}, ]}].ID} && ${Math.Distance[${Spawn[pc ${EQBC.Names.Arg[${x}, ]}].Loc},${Spawn[pc ${EQBC.Names.Arg[${x}, ]}].Z}]} > ${BotTrackerDistance}) {
					/if (${Toggle-autofollow} && ${EQBC.Names.Arg[${x}, ].Equal[${Me.CleanName}]} && ${Math.Distance[${Spawn[pc ${autofollowTarget}].Loc},${Spawn[pc ${autofollowTarget}].Z}]} > ${FollowLeashSetting.Arg[1,|]} && ${Math.Distance[${Spawn[pc ${autofollowTarget}].Loc} ${Spawn[pc ${autofollowTarget}].Z}]} < ${FollowLeashSetting.Arg[2,|]}) {
						/popup I [${EQBC.Names.Arg[${x}, ]}] have fallen behind, Trying to Stick Now...
						/if (!${Stick.Active} && ${Spawn[pc ${autofollowTarget}].LineOfSight}) /stick uw 10 id ${Spawn[pc ${autofollowTarget}].ID}
					} else {
						/popup [${EQBC.Names.Arg[${x}, ]}] has fallen behind!!
					}
				} else /if (!${Spawn[pc ${EQBC.Names.Arg[${x}, ]}].ID}) {
					/popup [${EQBC.Names.Arg[${x}, ]}] Not in my Zone!!
				}
			
			}		
			
			/next x
		}
	}
	
/return